@model  Website.Models.Movie

@{
    ViewBag.Title = "GetMovie";
}
<link href="~/Content/styling.css" rel="stylesheet" type="text/css" />
<link href="~/Content/readmore.css" rel="stylesheet" type="text/css" />

<h2>
    @Html.DisplayFor(model => model.MovieName) Overview:
</h2>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/readmore.js"></script>
<div class="col-xs-12">
    <div class="col-xs-3">
        <img src="@Model.Picture.PictureName" style="width:100%;height:30%;" />
    </div>
    <div class="col-xs-7">
        <div>
            <dl class="dl-horizontal">

                <dt>
                    @Html.DisplayNameFor(item => item.Genre.GenreName)
                </dt>

                <dd>
                    @Html.DisplayFor(item => item.Genre.GenreName)
                </dd>
                <dt>
                    Movie Rating
                </dt>
                <dd>
                    @(Model.Review.Count() == 0 ? "No reviews yet" : ((double)Model.Review.Sum(m => m.ReviewRating) / Model.Review.Count()).ToString())
                </dd>

                <dt>
                    @Html.DisplayNameFor(item => item.MovieDuration) (Min)
                </dt>

                <dd>
                    @Html.DisplayFor(item => item.MovieDuration)
                </dd>
                <dt>
                    @Html.DisplayNameFor(item => item.YearOfPublish)
                </dt>

                <dd>
                    @Html.DisplayFor(item => item.YearOfPublish)
                </dd>
                <dt>
                    Writers
                </dt>
                <dd>
                    @foreach (var writer in Model.Writer)
                    {
                        @Html.ActionLink(writer.WriterName, "GetWriterById", "Writer", new { Id = writer.WriterId }, null)
                        if (writer != Model.Writer.Last())
                        {
                            <tab>,</tab>
                        }
                    }
                </dd>
                <dt>
                    Directors
                </dt>
                <dd>
                    @foreach (var director in Model.Director)
                    {
                        @Html.ActionLink(director.DirectorName, "GetDirectorById", "Director", new { Id = director.DirectorId }, null)
                        if (director != Model.Director.Last())
                        {
                            <tab>,</tab>
                        }
                    }
                </dd>
                <dt>
                    Actors
                </dt>
                <dd>
                    @foreach (var actor in Model.Actor)
                    {
                        @Html.ActionLink(actor.ActorName, "GetActorById", "Actor", new { Id = actor.ActorId }, null)
                        if (actor != Model.Actor.Last())
                        {
                            <tab>,</tab>
                        }
                    }
                </dd>
                <dt>
                    @Html.DisplayNameFor(item => item.Summary)
                </dt>

                <dd>
                    <span class="more">
                        @Html.DisplayFor(item => item.Summary)
                    </span>
                </dd>

                <dt>
                    IMDb Rating
                </dt>
                @if (ViewBag.ImdbRating != 0)
                {
                    <dd>
                        @ViewBag.ImdbRating
                    </dd>
                }
                else
                {
                    <dd>
                        No rating found.
                    </dd>
                }
            </dl>
        </div>
    </div>
    <div class="col-xs-2"></div>

</div>

<div class="col-xs-12">
    <br />
    <hr />
</div>


@if (Model.YoutubeId != null)
{
    <div class="col-xs-12">
        <div class="col-xs-8">
            <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
            <div id="player"></div>

            <script id="vid" data-myvar="@Model.YoutubeId">
                // 2. This code loads the IFrame Player API code asynchronously.
                var tag = document.createElement('script');

                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

                // 3. This function creates an <iframe> (and YouTube player)
                //    after the API code downloads.
                var player;
                function onYouTubeIframeAPIReady() {
                    player = new YT.Player('player', {
                        height: '350px',
                        width: '100%',
                        videoId: $('#vid').data('myvar'),
                        events: {
                            'onReady': onPlayerReady,
                            'onStateChange': onPlayerStateChange
                        }
                    });
                }

                // 4. The API will call this function when the video player is ready.
                function onPlayerReady(event) {
                    event.target.playVideo();
                }

                // 5. The API calls this function when the player's state changes.
                //    The function indicates that when playing a video (state=1),
                //    the player should play for six seconds and then stop.
                var done = false;
                function onPlayerStateChange(event) {
                    if (event.data == YT.PlayerState.PLAYING && !done) {
                        setTimeout(stopVideo, 3000);
                        done = true;
                    }
                }
                function stopVideo() {
                    player.stopVideo();
                }
            </script>
        </div>
        <div class="col-xs-4"></div>
    </div>
}
@if (Model.YoutubeId == null)
{
    <div class="col-xs-12">
        <h3> No Trailer Found</h3>
    </div>
}
<div class="col-xs-12">
    <br />
    <hr />
</div>
<div class="col-xs-12">
    <h2>
        <b> Most recent reviews:</b>
    </h2>
</div>
<hr />
@if (Model.Review.Count() != 0)
{
    foreach (var m in Model.Review)
    {
        <div class="col-xs-12">
            <div class="col-xs-5">
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(item => m.UserName)
                    </dt>

                    <dd>
                        @Html.DisplayFor(item => m.UserName)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(item => m.ReviewDate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(item => m.ReviewDate)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(item => m.ReviewRating)
                    </dt>

                    <dd>
                        @Html.DisplayFor(item => m.ReviewRating)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(item => m.ReviewText)
                    </dt>

                    <dd>
                        <span class="more">
                            @Html.DisplayFor(item => m.ReviewText)
                        </span>
                    </dd>

                </dl>
            </div>
            <div class="col-xs-7"></div>
        </div>
        <hr />
    }
    <div class="col-xs-12">
        <button onclick="location.href = '@Url.Action("GetReviewsByMovieId", "Review", new { id = Model.MovieId })'; return false;">
            See all reviews
        </button>
    </div>
}
else
{
    <div class="col-xs-12">
        <h4>No reviews yet</h4>
    </div>
}
<div class="col-xs-12">
    <button onclick="location.href = '@Url.Action("Create", "Review",new { id = Model.MovieId })'; return false;">
        Add new review
    </button>
</div>
<div class="col-xs-12">
    @Html.ActionLink("Back to previous page", null, null, null, new { href = Request.UrlReferrer })
</div>
